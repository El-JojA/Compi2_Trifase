configuracion_configuracion(){
sptr = sptr + 2;
call configuracion_init();
t40 = sptr + 1;
t41 = stack[t40];
sptr = sptr - 2;
t42 = sptr + 1;
stack[t42] = t41;
t43 = sptr + 0;
stack[t43] = t41;
//Comienza un acceso a un array que es atributo. 
t10 = ptr + 0;
t11 = stack[t10]; 
t12 = t11 + 2;
t13 = heap[t12];
t14 = 0;
t15 = t13 + 1;
t16 = heap[t13];
t17 = t16 + t13;
t18 = t17 + 1;
t19 = t18 + t14;
heap[t19] = 255;
//Comienza un acceso a un array que es atributo. 
t20 = ptr + 0;
t21 = stack[t20]; 
t22 = t21 + 2;
t23 = heap[t22];
t24 = 1;
t25 = t23 + 1;
t26 = heap[t23];
t27 = t26 + t23;
t28 = t27 + 1;
t29 = t28 + t24;
heap[t29] = 255;
//Comienza un acceso a un array que es atributo. 
t30 = ptr + 0;
t31 = stack[t30]; 
t32 = t31 + 2;
t33 = heap[t32];
t34 = 2;
t35 = t33 + 1;
t36 = heap[t33];
t37 = t36 + t33;
t38 = t37 + 1;
t39 = t38 + t34;
heap[t39] = 255;
L0:
}


configuracion_getAlto(){ 
//Inicio del return. CodE + lo del return y un break. sentenciaReturn() 
t44 = sptr + 0;
t45 = stack[t44];
t46 = t45 + 1;
t47 = heap[t46];
t48 = t47;
t49 = sptr + 1;
stack[t49] = t48;
goto L1;

L1:
}


configuracion_getAncho(){ 
//Inicio del return. CodE + lo del return y un break. sentenciaReturn() 
t50 = sptr + 0;
t51 = stack[t50];
t52 = t51 + 0;
t53 = heap[t52];
t54 = t53;
t55 = sptr + 1;
stack[t55] = t54;
goto L2;

L2:
}

configuracion_init(){
t56 = hptr;
t58 = sptr + 0;
stack[t58] = hptr;
hptr = hptr + 3;
t0 = sptr + 0;
t1 = stack[t0];
t2 = t1 + 0;
heap[t2] = 450;
t3 = sptr + 0;
t4 = stack[t3];
t5 = t4 + 1;
heap[t5] = 500;
t7 = sptr + 0;
t8 = stack[t7];
t9 = t8 + 2;
heap[t9] = hptr;
heap[hptr] = 1;
hptr = hptr + 1;
t6 = 3;
heap[hptr] = t6;
hptr = hptr + 1;
hptr = hptr + t6;
t57 = sptr + 1;
stack[t57] = t56;
}


herencia_funcion_int_string(){ 
t68 = sptr + 4;
stack[t68] = 0;

L3:
}

herencia_herencia(){
t69 = hptr;
t71 = sptr + 0;
stack[t71] = hptr;
hptr = hptr + 3;
t59 = sptr + 0;
t60 = stack[t59];
t61 = t60 + 0;
heap[t61] = 300.0;
t62 = sptr + 0;
t63 = stack[t62];
t64 = t63 + 1;
heap[t64] = 2;
t65 = sptr + 0;
t66 = stack[t65];
t67 = t66 + 2;
heap[t67] = 0.86576;
t70 = sptr + 1;
stack[t70] = t69;
}


main(){ 
//Inicio de un new Objeto(). newObjeto()  
sptr = sptr + 3;
call configuracion_configuracion();
t88 = sptr + 1;
t89 = stack[t88];
sptr = sptr - 3;
t90 = sptr + 2;
stack[t90] = t89;
//Inicio de funcion de la misma clase 
t91 = sptr + 2;
t92 = stack[t91];
t93 = t92;
t95 = sptr + 0;
t96 = stack[t95];
sptr = sptr + 3;
t97 = sptr + 0;
stack[t97] = t96;
t94 = sptr + 2;
stack[t94] = t93;
call principal_setCanvas_configuracion();
t98 = sptr + 1;
t99 = stack[t98];
sptr = sptr - 3;
t100 = sptr + 0;
t101 = stack[t100];
t102 = t101 + 4;
heap[t102] = 0;
t103 = sptr + 0;
t104 = stack[t103];
t105 = t104 + 5;
heap[t105] = 0;
t106 = sptr + 0;
t107 = stack[t106];
t108 = t107 + 6;
heap[t108] = 0;
//Inicio de funcion de la misma clase 
t109 = sptr + 0;
t110 = stack[t109];
sptr = sptr + 3;
t111 = sptr + 0;
stack[t111] = t110;
call principal_pintar();
t112 = sptr + 1;
t113 = stack[t112];
sptr = sptr - 3;

L4:
}


principal_pintar(){ 
t114 = sptr + 2;
stack[t114] = 0;
t115 = sptr + 3;
stack[t115] = 0;
t116 = sptr + 4;
stack[t116] = 0;
t117 = sptr + 5;
stack[t117] = 0;
t118 = sptr + 6;
stack[t118] = 0;
t119 = sptr + 2;
t120 = stack[t119];
t121 = sptr + 7;
stack[t121] = t120;
t122 = sptr + 3;
t123 = stack[t122];
t124 = sptr + 8;
stack[t124] = t123;
t125 = sptr + 4;
t126 = stack[t125];
t127 = sptr + 9;
stack[t127] = t126;
t128 = sptr + 5;
t129 = stack[t128];
t130 = sptr + 10;
stack[t130] = t129;
t397 = sptr + 11;
stack[t397] = 0;
L16:
t131 = sptr + 11;
t132 = stack[t131];
t133 = sptr + 0;
t134 = stack[t133];
t135 = t134 + 3;
t136 = heap[t135];
if t132 < t136 goto L6;
t137 = 0;
goto L7;
L6: 
t137 = 1;
L7: 
if t137 == 1 goto L17;
goto L18;
L17:
t141 = sptr + 9;
t142 = stack[t141];
t143 = sptr + 7;
t144 = stack[t143];
t145 = t142 - t144;
t146 = t145 / 2;
t147 = sptr + 12;
stack[t147] = t146;
t148 = sptr + 10;
t149 = stack[t148];
t150 = sptr + 8;
t151 = stack[t150];
t152 = t149 - t151;
t153 = t152 / 2;
t154 = sptr + 13;
stack[t154] = t153;
t155 = sptr + 7;
t156 = stack[t155];
t157 = sptr + 12;
t158 = stack[t157];
t159 = t156 + t158;
t160 = sptr + 13;
t161 = stack[t160];
t162 = 2 * t161;
t163 = sptr + 6;
t164 = stack[t163];
t165 = t162 * t164;
t166 = t159 - t165;
t167 = sptr + 14;
stack[t167] = t166;
t168 = sptr + 8;
t169 = stack[t168];
t170 = sptr + 13;
t171 = stack[t170];
t172 = t169 + t171;
t173 = sptr + 12;
t174 = stack[t173];
t175 = 2 * t174;
t176 = sptr + 6;
t177 = stack[t176];
t178 = t175 * t177;
t179 = t172 + t178;
t180 = sptr + 15;
stack[t180] = t179;
t181 = sptr + 9;
t182 = stack[t181];
t183 = sptr + 7;
t184 = stack[t183];
t185 = t182 + t184;
t186 = t185 / 2;
t187 = sptr + 16;
stack[t187] = t186;
t188 = sptr + 10;
t189 = stack[t188];
t190 = sptr + 8;
t191 = stack[t190];
t192 = t189 + t191;
t193 = t192 / 2;
t194 = sptr + 17;
stack[t194] = t193;
t195 = sptr + 14;
t196 = stack[t195];
t197 = sptr + 9;
t198 = stack[t197];
t199 = t196 + t198;
t200 = t199 / 2;
t201 = sptr + 18;
stack[t201] = t200;
t202 = sptr + 15;
t203 = stack[t202];
t204 = sptr + 10;
t205 = stack[t204];
t206 = t203 + t205;
t207 = t206 / 2;
t208 = sptr + 19;
stack[t208] = t207;
t209 = sptr + 7;
t210 = stack[t209];
t211 = sptr + 14;
t212 = stack[t211];
t213 = t210 + t212;
t214 = t213 / 2;
t215 = sptr + 20;
stack[t215] = t214;
t216 = sptr + 8;
t217 = stack[t216];
t218 = sptr + 15;
t219 = stack[t218];
t220 = t217 + t219;
t221 = t220 / 2;
t222 = sptr + 21;
stack[t222] = t221;
t223 = sptr + 11;
t224 = stack[t223];
if t224 <= 0 goto L10;
t225 = 0;
goto L11;
L10: 
t225 = 1;
L11: 
if t225 == 1 goto L14;
goto L15;
L14:
t226 = sptr + 7;
t227 = stack[t226];
//Casteo de float a int
t228 = floatToInt(t227);
t250 = t228;
t229 = sptr + 8;
t230 = stack[t229];
//Casteo de float a int
t231 = floatToInt(t230);
t251 = t231;
t232 = sptr + 9;
t233 = stack[t232];
//Casteo de float a int
t234 = floatToInt(t233);
t252 = t234;
t235 = sptr + 10;
t236 = stack[t235];
//Casteo de float a int
t237 = floatToInt(t236);
t253 = t237;
t238 = sptr + 0;
t239 = stack[t238];
t240 = t239 + 4;
t241 = heap[t240];
t254 = t241;
t242 = sptr + 0;
t243 = stack[t242];
t244 = t243 + 5;
t245 = heap[t244];
t255 = t245;
t246 = sptr + 0;
t247 = stack[t246];
t248 = t247 + 6;
t249 = heap[t248];
t256 = t249;
callf linea(t250,t251,t252,t253,t254,t255,t256);
t257 = sptr + 9;
t258 = stack[t257];
//Casteo de float a int
t259 = floatToInt(t258);
t281 = t259;
t260 = sptr + 10;
t261 = stack[t260];
//Casteo de float a int
t262 = floatToInt(t261);
t282 = t262;
t263 = sptr + 14;
t264 = stack[t263];
//Casteo de float a int
t265 = floatToInt(t264);
t283 = t265;
t266 = sptr + 15;
t267 = stack[t266];
//Casteo de float a int
t268 = floatToInt(t267);
t284 = t268;
t269 = sptr + 0;
t270 = stack[t269];
t271 = t270 + 4;
t272 = heap[t271];
t285 = t272;
t273 = sptr + 0;
t274 = stack[t273];
t275 = t274 + 5;
t276 = heap[t275];
t286 = t276;
t277 = sptr + 0;
t278 = stack[t277];
t279 = t278 + 6;
t280 = heap[t279];
t287 = t280;
callf linea(t281,t282,t283,t284,t285,t286,t287);
t288 = sptr + 14;
t289 = stack[t288];
//Casteo de float a int
t290 = floatToInt(t289);
t312 = t290;
t291 = sptr + 15;
t292 = stack[t291];
//Casteo de float a int
t293 = floatToInt(t292);
t313 = t293;
t294 = sptr + 7;
t295 = stack[t294];
//Casteo de float a int
t296 = floatToInt(t295);
t314 = t296;
t297 = sptr + 8;
t298 = stack[t297];
//Casteo de float a int
t299 = floatToInt(t298);
t315 = t299;
t300 = sptr + 0;
t301 = stack[t300];
t302 = t301 + 4;
t303 = heap[t302];
t316 = t303;
t304 = sptr + 0;
t305 = stack[t304];
t306 = t305 + 5;
t307 = heap[t306];
t317 = t307;
t308 = sptr + 0;
t309 = stack[t308];
t310 = t309 + 6;
t311 = heap[t310];
t318 = t311;
callf linea(t312,t313,t314,t315,t316,t317,t318);
goto L13:
L15:
//Inicio de funcion de la misma clase 
t319 = sptr + 11;
t320 = stack[t319];
t321 = t320 - 1;
t322 = sptr + 7;
t323 = stack[t322];
t324 = sptr + 8;
t325 = stack[t324];
t326 = sptr + 16;
t327 = stack[t326];
t328 = sptr + 17;
t329 = stack[t328];
t330 = t321;
t332 = t323;
t334 = t325;
t336 = t327;
t338 = t329;
t340 = sptr + 0;
t341 = stack[t340];
sptr = sptr + 12;
t342 = sptr + 0;
stack[t342] = t341;
t331 = sptr + 2;
stack[t331] = t330;
t333 = sptr + 3;
stack[t333] = t332;
t335 = sptr + 4;
stack[t335] = t334;
t337 = sptr + 5;
stack[t337] = t336;
t339 = sptr + 6;
stack[t339] = t338;
call principal_paintRecursivo_int_float_float_float_float();
t343 = sptr + 1;
t344 = stack[t343];
sptr = sptr - 12;
//Inicio de funcion de la misma clase 
t345 = sptr + 11;
t346 = stack[t345];
t347 = t346 - 1;
t348 = sptr + 16;
t349 = stack[t348];
t350 = sptr + 17;
t351 = stack[t350];
t352 = sptr + 9;
t353 = stack[t352];
t354 = sptr + 10;
t355 = stack[t354];
t356 = t347;
t358 = t349;
t360 = t351;
t362 = t353;
t364 = t355;
t366 = sptr + 0;
t367 = stack[t366];
sptr = sptr + 12;
t368 = sptr + 0;
stack[t368] = t367;
t357 = sptr + 2;
stack[t357] = t356;
t359 = sptr + 3;
stack[t359] = t358;
t361 = sptr + 4;
stack[t361] = t360;
t363 = sptr + 5;
stack[t363] = t362;
t365 = sptr + 6;
stack[t365] = t364;
call principal_paintRecursivo_int_float_float_float_float();
t369 = sptr + 1;
t370 = stack[t369];
sptr = sptr - 12;
//Inicio de funcion de la misma clase 
t371 = sptr + 11;
t372 = stack[t371];
t373 = t372 - 1;
t374 = sptr + 20;
t375 = stack[t374];
t376 = sptr + 21;
t377 = stack[t376];
t378 = sptr + 18;
t379 = stack[t378];
t380 = sptr + 19;
t381 = stack[t380];
t382 = t373;
t384 = t375;
t386 = t377;
t388 = t379;
t390 = t381;
t392 = sptr + 0;
t393 = stack[t392];
sptr = sptr + 12;
t394 = sptr + 0;
stack[t394] = t393;
t383 = sptr + 2;
stack[t383] = t382;
t385 = sptr + 3;
stack[t385] = t384;
t387 = sptr + 4;
stack[t387] = t386;
t389 = sptr + 5;
stack[t389] = t388;
t391 = sptr + 6;
stack[t391] = t390;
call principal_paintRecursivo_int_float_float_float_float();
t395 = sptr + 1;
t396 = stack[t395];
sptr = sptr - 12;
L13:
t138 = sptr + 11;
t140 = stack[t138];
t139 = t140 + 1;
stack[t138] = t139;
goto L16;
L18:
L9:
t398 = sptr + 0;
t399 = stack[t398];
t400 = t399 + 7;
t401 = heap[t400];
t402 = hptr;
heap[hptr] = 83;
hptr = hptr + 1;
heap[hptr] = 105;
hptr = hptr + 1;
heap[hptr] = 101;
hptr = hptr + 1;
heap[hptr] = 114;
hptr = hptr + 1;
heap[hptr] = 112;
hptr = hptr + 1;
heap[hptr] = 105;
hptr = hptr + 1;
heap[hptr] = 110;
hptr = hptr + 1;
heap[hptr] = 115;
hptr = hptr + 1;
heap[hptr] = 107;
hptr = hptr + 1;
heap[hptr] = 105;
hptr = hptr + 1;
heap[hptr] = 32;
hptr = hptr + 1;
heap[hptr] = 45;
hptr = hptr + 1;
heap[hptr] = 32;
hptr = hptr + 1;
heap[hptr] = -1; 
hptr = hptr + 1;
t403 = conca(t401, t402);
t404 = hptr;
heap[hptr] = 99;
hptr = hptr + 1;
heap[hptr] = 111;
hptr = hptr + 1;
heap[hptr] = 109;
hptr = hptr + 1;
heap[hptr] = 112;
hptr = hptr + 1;
heap[hptr] = 105;
hptr = hptr + 1;
heap[hptr] = 32;
hptr = hptr + 1;
heap[hptr] = 50;
hptr = hptr + 1;
heap[hptr] = -1; 
hptr = hptr + 1;
t405 = conca(t403, t404);
t406 = t405;
t407 = 30;
t408 = 30;
t409 = 255;
t410 = 0;
t411 = 0;
callf texto(t406,t407,t408,t409,t410,t411);

L5:
}


principal_paintRecursivo_int_float_float_float_float(){ 
t412 = sptr + 5;
t413 = stack[t412];
t414 = sptr + 3;
t415 = stack[t414];
t416 = t413 - t415;
t417 = t416 / 2;
t418 = sptr + 7;
stack[t418] = t417;
t419 = sptr + 6;
t420 = stack[t419];
t421 = sptr + 4;
t422 = stack[t421];
t423 = t420 - t422;
t424 = t423 / 2;
t425 = sptr + 8;
stack[t425] = t424;
t426 = sptr + 3;
t427 = stack[t426];
t428 = sptr + 7;
t429 = stack[t428];
t430 = t427 + t429;
t431 = sptr + 8;
t432 = stack[t431];
t433 = 2 * t432;
t434 = sptr + 0;
t435 = stack[t434];
t436 = t435 + 2;
t437 = heap[t436];
t438 = t433 * t437;
t439 = t430 - t438;
t440 = sptr + 9;
stack[t440] = t439;
t441 = sptr + 4;
t442 = stack[t441];
t443 = sptr + 8;
t444 = stack[t443];
t445 = t442 + t444;
t446 = sptr + 7;
t447 = stack[t446];
t448 = 2 * t447;
t449 = sptr + 0;
t450 = stack[t449];
t451 = t450 + 2;
t452 = heap[t451];
t453 = t448 * t452;
t454 = t445 + t453;
t455 = sptr + 10;
stack[t455] = t454;
t456 = sptr + 5;
t457 = stack[t456];
t458 = sptr + 3;
t459 = stack[t458];
t460 = t457 + t459;
t461 = t460 / 2;
t462 = sptr + 11;
stack[t462] = t461;
t463 = sptr + 6;
t464 = stack[t463];
t465 = sptr + 4;
t466 = stack[t465];
t467 = t464 + t466;
t468 = t467 / 2;
t469 = sptr + 12;
stack[t469] = t468;
t470 = sptr + 9;
t471 = stack[t470];
t472 = sptr + 5;
t473 = stack[t472];
t474 = t471 + t473;
t475 = t474 / 2;
t476 = sptr + 13;
stack[t476] = t475;
t477 = sptr + 10;
t478 = stack[t477];
t479 = sptr + 6;
t480 = stack[t479];
t481 = t478 + t480;
t482 = t481 / 2;
t483 = sptr + 14;
stack[t483] = t482;
t484 = sptr + 3;
t485 = stack[t484];
t486 = sptr + 9;
t487 = stack[t486];
t488 = t485 + t487;
t489 = t488 / 2;
t490 = sptr + 15;
stack[t490] = t489;
t491 = sptr + 4;
t492 = stack[t491];
t493 = sptr + 10;
t494 = stack[t493];
t495 = t492 + t494;
t496 = t495 / 2;
t497 = sptr + 16;
stack[t497] = t496;
t498 = sptr + 2;
t499 = stack[t498];
if t499 <= 0 goto L20;
t500 = 0;
goto L21;
L20: 
t500 = 1;
L21: 
if t500 == 1 goto L24;
goto L25;
L24:
t501 = sptr + 3;
t502 = stack[t501];
//Casteo de float a int
t503 = floatToInt(t502);
t525 = t503;
t504 = sptr + 4;
t505 = stack[t504];
//Casteo de float a int
t506 = floatToInt(t505);
t526 = t506;
t507 = sptr + 5;
t508 = stack[t507];
//Casteo de float a int
t509 = floatToInt(t508);
t527 = t509;
t510 = sptr + 6;
t511 = stack[t510];
//Casteo de float a int
t512 = floatToInt(t511);
t528 = t512;
t513 = sptr + 0;
t514 = stack[t513];
t515 = t514 + 4;
t516 = heap[t515];
t529 = t516;
t517 = sptr + 0;
t518 = stack[t517];
t519 = t518 + 5;
t520 = heap[t519];
t530 = t520;
t521 = sptr + 0;
t522 = stack[t521];
t523 = t522 + 6;
t524 = heap[t523];
t531 = t524;
callf linea(t525,t526,t527,t528,t529,t530,t531);
t532 = sptr + 5;
t533 = stack[t532];
//Casteo de float a int
t534 = floatToInt(t533);
t556 = t534;
t535 = sptr + 6;
t536 = stack[t535];
//Casteo de float a int
t537 = floatToInt(t536);
t557 = t537;
t538 = sptr + 9;
t539 = stack[t538];
//Casteo de float a int
t540 = floatToInt(t539);
t558 = t540;
t541 = sptr + 10;
t542 = stack[t541];
//Casteo de float a int
t543 = floatToInt(t542);
t559 = t543;
t544 = sptr + 0;
t545 = stack[t544];
t546 = t545 + 4;
t547 = heap[t546];
t560 = t547;
t548 = sptr + 0;
t549 = stack[t548];
t550 = t549 + 5;
t551 = heap[t550];
t561 = t551;
t552 = sptr + 0;
t553 = stack[t552];
t554 = t553 + 6;
t555 = heap[t554];
t562 = t555;
callf linea(t556,t557,t558,t559,t560,t561,t562);
t563 = sptr + 9;
t564 = stack[t563];
//Casteo de float a int
t565 = floatToInt(t564);
t587 = t565;
t566 = sptr + 10;
t567 = stack[t566];
//Casteo de float a int
t568 = floatToInt(t567);
t588 = t568;
t569 = sptr + 3;
t570 = stack[t569];
//Casteo de float a int
t571 = floatToInt(t570);
t589 = t571;
t572 = sptr + 4;
t573 = stack[t572];
//Casteo de float a int
t574 = floatToInt(t573);
t590 = t574;
t575 = sptr + 0;
t576 = stack[t575];
t577 = t576 + 4;
t578 = heap[t577];
t591 = t578;
t579 = sptr + 0;
t580 = stack[t579];
t581 = t580 + 5;
t582 = heap[t581];
t592 = t582;
t583 = sptr + 0;
t584 = stack[t583];
t585 = t584 + 6;
t586 = heap[t585];
t593 = t586;
callf linea(t587,t588,t589,t590,t591,t592,t593);
goto L23:
L25:
//Inicio de funcion de la misma clase 
t594 = sptr + 2;
t595 = stack[t594];
t596 = t595 - 1;
t597 = sptr + 3;
t598 = stack[t597];
t599 = sptr + 4;
t600 = stack[t599];
t601 = sptr + 11;
t602 = stack[t601];
t603 = sptr + 12;
t604 = stack[t603];
t605 = t596;
t607 = t598;
t609 = t600;
t611 = t602;
t613 = t604;
t615 = sptr + 0;
t616 = stack[t615];
sptr = sptr + 17;
t617 = sptr + 0;
stack[t617] = t616;
t606 = sptr + 2;
stack[t606] = t605;
t608 = sptr + 3;
stack[t608] = t607;
t610 = sptr + 4;
stack[t610] = t609;
t612 = sptr + 5;
stack[t612] = t611;
t614 = sptr + 6;
stack[t614] = t613;
call principal_paintRecursivo_int_float_float_float_float();
t618 = sptr + 1;
t619 = stack[t618];
sptr = sptr - 17;
//Inicio de funcion de la misma clase 
t620 = sptr + 2;
t621 = stack[t620];
t622 = t621 - 1;
t623 = sptr + 11;
t624 = stack[t623];
t625 = sptr + 12;
t626 = stack[t625];
t627 = sptr + 5;
t628 = stack[t627];
t629 = sptr + 6;
t630 = stack[t629];
t631 = t622;
t633 = t624;
t635 = t626;
t637 = t628;
t639 = t630;
t641 = sptr + 0;
t642 = stack[t641];
sptr = sptr + 17;
t643 = sptr + 0;
stack[t643] = t642;
t632 = sptr + 2;
stack[t632] = t631;
t634 = sptr + 3;
stack[t634] = t633;
t636 = sptr + 4;
stack[t636] = t635;
t638 = sptr + 5;
stack[t638] = t637;
t640 = sptr + 6;
stack[t640] = t639;
call principal_paintRecursivo_int_float_float_float_float();
t644 = sptr + 1;
t645 = stack[t644];
sptr = sptr - 17;
//Inicio de funcion de la misma clase 
t646 = sptr + 2;
t647 = stack[t646];
t648 = t647 - 1;
t649 = sptr + 15;
t650 = stack[t649];
t651 = sptr + 16;
t652 = stack[t651];
t653 = sptr + 13;
t654 = stack[t653];
t655 = sptr + 14;
t656 = stack[t655];
t657 = t648;
t659 = t650;
t661 = t652;
t663 = t654;
t665 = t656;
t667 = sptr + 0;
t668 = stack[t667];
sptr = sptr + 17;
t669 = sptr + 0;
stack[t669] = t668;
t658 = sptr + 2;
stack[t658] = t657;
t660 = sptr + 3;
stack[t660] = t659;
t662 = sptr + 4;
stack[t662] = t661;
t664 = sptr + 5;
stack[t664] = t663;
t666 = sptr + 6;
stack[t666] = t665;
call principal_paintRecursivo_int_float_float_float_float();
t670 = sptr + 1;
t671 = stack[t670];
sptr = sptr - 17;
L23:

L19:
}


principal_setCanvas_configuracion(){ 
t676 = sptr + 2;
t677 = stack[t676];
t672 = t677;
//Inicio de llamada a una funcion de un objeto. Obj.fun1(). sentenciaFuncion2() 
sptr = sptr + 3;
t673 = sptr + 0;
stack[t673] = t672;
call configuracion_getAlto();
t674 = sptr + 1;
t675 = stack[t674];
sptr = sptr - 3;
t678 = t675;
t722 = t678;
t683 = sptr + 2;
t684 = stack[t683];
t679 = t684;
//Inicio de llamada a una funcion de un objeto. Obj.fun1(). sentenciaFuncion2() 
sptr = sptr + 3;
t680 = sptr + 0;
stack[t680] = t679;
call configuracion_getAncho();
t681 = sptr + 1;
t682 = stack[t681];
sptr = sptr - 3;
t685 = t682;
t723 = t685;
t695 = sptr + 2;
t696 = stack[t695];
t686 = t696;
t687 = t686 + 2;
t688 = heap[t687];
t689 = 0;
t690 = t688 + 1;
t691 = heap[t688];
t692 = t691 + t688;
t693 = t692 + 1;
t694 = t693 + t689;
t697 = heap[t694];
t724 = t697;
t707 = sptr + 2;
t708 = stack[t707];
t698 = t708;
t699 = t698 + 2;
t700 = heap[t699];
t701 = 1;
t702 = t700 + 1;
t703 = heap[t700];
t704 = t703 + t700;
t705 = t704 + 1;
t706 = t705 + t701;
t709 = heap[t706];
t725 = t709;
t719 = sptr + 2;
t720 = stack[t719];
t710 = t720;
t711 = t710 + 2;
t712 = heap[t711];
t713 = 2;
t714 = t712 + 1;
t715 = heap[t712];
t716 = t715 + t712;
t717 = t716 + 1;
t718 = t717 + t713;
t721 = heap[t718];
t726 = t721;
callf lienzo(t722,t723,t724,t725,t726);

L26:
}

principal_principal(){
t727 = hptr;
t729 = sptr + 0;
stack[t729] = hptr;
hptr = hptr + 5;
t59 = sptr + 0;
t60 = stack[t59];
t61 = t60 + 0;
heap[t61] = 300.0;
t62 = sptr + 0;
t63 = stack[t62];
t64 = t63 + 1;
heap[t64] = 2;
t65 = sptr + 0;
t66 = stack[t65];
t67 = t66 + 2;
heap[t67] = 0.86576;
t72 = sptr + 0;
t73 = stack[t72];
t74 = t73 + 3;
heap[t74] = 6;
t75 = sptr + 0;
t76 = stack[t75];
t77 = t76 + 4;
heap[t77] = 0;
t78 = sptr + 0;
t79 = stack[t78];
t80 = t79 + 5;
heap[t80] = 0;
t81 = sptr + 0;
t82 = stack[t81];
t83 = t82 + 6;
heap[t83] = 0;
t84 = hptr;
heap[hptr] = 84;
hptr = hptr + 1;
heap[hptr] = 114;
hptr = hptr + 1;
heap[hptr] = 105;
hptr = hptr + 1;
heap[hptr] = 97;
hptr = hptr + 1;
heap[hptr] = 110;
hptr = hptr + 1;
heap[hptr] = 103;
hptr = hptr + 1;
heap[hptr] = 117;
hptr = hptr + 1;
heap[hptr] = 108;
hptr = hptr + 1;
heap[hptr] = 111;
hptr = hptr + 1;
heap[hptr] = 32;
hptr = hptr + 1;
heap[hptr] = 100;
hptr = hptr + 1;
heap[hptr] = 101;
hptr = hptr + 1;
heap[hptr] = 32;
hptr = hptr + 1;
heap[hptr] = -1; 
hptr = hptr + 1;
t85 = sptr + 0;
t86 = stack[t85];
t87 = t86 + 7;
heap[t87] = t84;
t728 = sptr + 1;
stack[t728] = t727;
}

