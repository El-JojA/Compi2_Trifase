/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package compi2_trifase;

import acciones.jojaphviz.Metodos;
import acciones.proyectos.*;
import acciones.tablasimbolos.*;
import analisis.C3dCup;
import analisis.C3dLex;
import analisis.IDEColores;
import analisis.JojaphvizCup;
import analisis.JojaphvizCup2;
import analisis.JojaphvizLex;
import analisis.ProyectosCup;
import analisis.ProyectosLex;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author joja
 */
public class GUInicial extends javax.swing.JFrame {

    Proyecto proyectoActual;
    //jTree
    DefaultMutableTreeNode raizNode = new DefaultMutableTreeNode("Proyectos");
    DefaultTreeModel raizModel = new DefaultTreeModel(raizNode);
    JTree jTreeProyectos = new JTree(raizModel);
    
    
    
    
    public GUInicial() {
        initComponents();
        this.jScrollPaneTree.setViewportView(jTreeProyectos);
        jTreeProyectos.setVisible(true);
        Metodos.initTablaSimbolos();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserProyectos = new javax.swing.JFileChooser();
        jTabbedPaneEditor = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneStart = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPaneConsola = new javax.swing.JEditorPane();
        jScrollPaneTree = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jMenuBarPrincipal = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuArchivoNuevo = new javax.swing.JMenu();
        jMenuItemNuevoArchivo = new javax.swing.JMenuItem();
        jMenuItemNuevoProyecto = new javax.swing.JMenuItem();
        jMenuArchivoAbrir = new javax.swing.JMenu();
        jMenuItemAbrirArchivo = new javax.swing.JMenuItem();
        jMenuItemAbrirProyecto = new javax.swing.JMenuItem();
        jMenuArchivoGuardar = new javax.swing.JMenuItem();
        jMenuItemArchivoSalir = new javax.swing.JMenuItem();
        jMenuCompilar = new javax.swing.JMenu();
        jMenuItemCompilarTS = new javax.swing.JMenuItem();
        jMenuItemCompilarGenCod = new javax.swing.JMenuItem();
        jMenuItemCompilarEjecutar = new javax.swing.JMenuItem();
        jMenuItemCompilarOptimizar = new javax.swing.JMenuItem();
        jMenuItemCompilarClear = new javax.swing.JMenuItem();
        jMenuErrores = new javax.swing.JMenu();
        jMenuItemErroresGenerar = new javax.swing.JMenuItem();
        jMenuTest = new javax.swing.JMenu();
        jMenuItemCompilarColor = new javax.swing.JMenuItem();
        jMenuItemTestGo = new javax.swing.JMenuItem();
        jMenuItemTestGo2 = new javax.swing.JMenuItem();

        jFileChooserProyectos.setDialogTitle("Abrir proyecto...");
        jFileChooserProyectos.setFileFilter(new MiFiltro());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextPaneStart.setText("public class prueba{\n\t\n    array<int> test = new Array(2,3)\n    int atr1 = 1\n    char atr2 = 'c'\n    \n    public void fun1(){\n        int a = 1\n        int b = 2\n        int r = a * b\n\n    }\n\n    public void main(){\n        prueba pru = new prueba()\n        pru.fun1()\n        \n    }\n\n}\n\n");
        jScrollPane1.setViewportView(jTextPaneStart);

        jTabbedPaneEditor.addTab("Start", jScrollPane1);

        jScrollPane3.setViewportView(jEditorPaneConsola);

        jScrollPaneTree.setViewportView(jTree1);

        jMenuArchivo.setText("Archivo");

        jMenuArchivoNuevo.setText("Nuevo");

        jMenuItemNuevoArchivo.setText("Archivo");
        jMenuArchivoNuevo.add(jMenuItemNuevoArchivo);

        jMenuItemNuevoProyecto.setText("Proyecto");
        jMenuArchivoNuevo.add(jMenuItemNuevoProyecto);

        jMenuArchivo.add(jMenuArchivoNuevo);

        jMenuArchivoAbrir.setText("Abrir");

        jMenuItemAbrirArchivo.setText("Archivo");
        jMenuArchivoAbrir.add(jMenuItemAbrirArchivo);

        jMenuItemAbrirProyecto.setText("Proyecto");
        jMenuItemAbrirProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirProyectoActionPerformed(evt);
            }
        });
        jMenuArchivoAbrir.add(jMenuItemAbrirProyecto);

        jMenuArchivo.add(jMenuArchivoAbrir);

        jMenuArchivoGuardar.setText("Guardar");
        jMenuArchivoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuArchivoGuardarActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuArchivoGuardar);

        jMenuItemArchivoSalir.setText("Salir");
        jMenuItemArchivoSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemArchivoSalirActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemArchivoSalir);

        jMenuBarPrincipal.add(jMenuArchivo);

        jMenuCompilar.setText("Compilar");

        jMenuItemCompilarTS.setText("Tabla de Símbolos");
        jMenuItemCompilarTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarTSActionPerformed(evt);
            }
        });
        jMenuCompilar.add(jMenuItemCompilarTS);

        jMenuItemCompilarGenCod.setText("Generar Código");
        jMenuItemCompilarGenCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarGenCodActionPerformed(evt);
            }
        });
        jMenuCompilar.add(jMenuItemCompilarGenCod);

        jMenuItemCompilarEjecutar.setText("Ejecutar");
        jMenuItemCompilarEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarEjecutarActionPerformed(evt);
            }
        });
        jMenuCompilar.add(jMenuItemCompilarEjecutar);

        jMenuItemCompilarOptimizar.setText("Optimizar");
        jMenuCompilar.add(jMenuItemCompilarOptimizar);

        jMenuItemCompilarClear.setText("Clear all");
        jMenuItemCompilarClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarClearActionPerformed(evt);
            }
        });
        jMenuCompilar.add(jMenuItemCompilarClear);

        jMenuBarPrincipal.add(jMenuCompilar);

        jMenuErrores.setText("Errores");

        jMenuItemErroresGenerar.setText("Generar");
        jMenuItemErroresGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErroresGenerarActionPerformed(evt);
            }
        });
        jMenuErrores.add(jMenuItemErroresGenerar);

        jMenuBarPrincipal.add(jMenuErrores);

        jMenuTest.setText("Test");
        jMenuTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTestActionPerformed(evt);
            }
        });

        jMenuItemCompilarColor.setText("Color");
        jMenuItemCompilarColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompilarColorActionPerformed(evt);
            }
        });
        jMenuTest.add(jMenuItemCompilarColor);

        jMenuItemTestGo.setText("Go");
        jMenuItemTestGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTestGoActionPerformed(evt);
            }
        });
        jMenuTest.add(jMenuItemTestGo);

        jMenuItemTestGo2.setText("Go2");
        jMenuItemTestGo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTestGo2ActionPerformed(evt);
            }
        });
        jMenuTest.add(jMenuItemTestGo2);

        jMenuBarPrincipal.add(jMenuTest);

        setJMenuBar(jMenuBarPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneEditor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPaneTree, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemAbrirProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirProyectoActionPerformed
        
        String archivoProyectos = openProyecto();
        if(archivoProyectos==null)
        {
            jEditorPaneConsola.setText(jEditorPaneConsola.getText() + "\n" + "Error al intentar abrir archivo.");
        }
        else if(archivoProyectos.equals("#Cancelado"))
        {
            //nada
        }
        else
        {
            this.compilar(archivoProyectos, "proy");
            Proyecto pro = MetodosProyectos.makeProyecto();
            if(pro!=null)
            {
                loadTree(pro);
                proyectoActual = pro;
                Metodos.proyectoActual = pro;
                //Cargar tabs con 
                try {
                    loadTabs(pro);
                    colorearTabs();
                } catch (IOException | BadLocationException ex) {
                    Logger.getLogger(GUInicial.class.getName()).log(Level.SEVERE, null, ex);
                }
                //TreeNode root = (TreeNode) jTree1.getModel().getRoot();
                //expandAll(jTree1, new TreePath(root), true);
            }
            else
            {
                jEditorPaneConsola.setText(jEditorPaneConsola.getText() + "\n" + "El archivo de proyecto contiene errores.");
            }
        }
        //System.out.println("archivoProyectos:" + archivoProyectos);
        
    }//GEN-LAST:event_jMenuItemAbrirProyectoActionPerformed
    
    private void jMenuTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTestActionPerformed
        
    }//GEN-LAST:event_jMenuTestActionPerformed

    private void jMenuItemTestGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTestGoActionPerformed
        Metodos.clearAll();
        compiTest();
        
    }//GEN-LAST:event_jMenuItemTestGoActionPerformed
    
    private void jMenuArchivoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuArchivoGuardarActionPerformed
        
        try 
        {
            saveArchivos();
        }
        catch(FileNotFoundException ex){System.out.println(ex.toString());}
        
    }//GEN-LAST:event_jMenuArchivoGuardarActionPerformed

    private void jMenuItemCompilarColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarColorActionPerformed
        try 
        {
            colorearTabs();
        }
        catch(Exception ex){System.out.println(ex);}
    }//GEN-LAST:event_jMenuItemCompilarColorActionPerformed

    private void jMenuItemCompilarTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarTSActionPerformed
        //Metodos.clearAll();
        //createTablaSimbolos();
        //MetodosTS.cargarTiposPrimitivos();
        //String texto = this.jTextPaneStart.getText();
        //this.compilar(texto, "joja");
        //MetodosTS.putPrincipalAsTipo();
        //this.compilar(texto, "joja2");
        
        genTablaDeSimbolos();
        
    }//GEN-LAST:event_jMenuItemCompilarTSActionPerformed

    private void jMenuItemArchivoSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemArchivoSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemArchivoSalirActionPerformed

    private void jMenuItemErroresGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemErroresGenerarActionPerformed
        try {
            Metodos.crearHTMLErrores();
        }catch(Exception ex){System.out.println("jMenuItemErroresGenerarActionPerformed  "+ ex.toString());}
        
    }//GEN-LAST:event_jMenuItemErroresGenerarActionPerformed

    private void jMenuItemTestGo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTestGo2ActionPerformed
        MetodosTS.ejecutarCodigoIntermedio();
    }//GEN-LAST:event_jMenuItemTestGo2ActionPerformed

    private void jMenuItemCompilarGenCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarGenCodActionPerformed
        genCodigoTresDirecciones();
        
    }//GEN-LAST:event_jMenuItemCompilarGenCodActionPerformed

    private void jMenuItemCompilarEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarEjecutarActionPerformed
        ejecutarCodigoTresDirecciones();
    }//GEN-LAST:event_jMenuItemCompilarEjecutarActionPerformed

    private void jMenuItemCompilarClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompilarClearActionPerformed
        MetodosTS.clearAll();
    }//GEN-LAST:event_jMenuItemCompilarClearActionPerformed
    
    public void genTablaDeSimbolos(){
        int indexPrincipal = getPrincipal();
        if(indexPrincipal>=0)
        {
            MetodosTS.clearAll();
            MetodosTS.cargarTiposPrimitivos();
            String texto = proyectoActual.listaArchivos.get(indexPrincipal).pane.getText();
            this.compilar(texto, "joja");
            
        }
    }
    
    public void ejecutarCodigoTresDirecciones(){
        this.compilar(MetodosTS.texto3d, "c3d");
        //MetodosTS.ejecutarCodigoIntermedio();
    }
    
    public void genCodigoTresDirecciones(){
        int indexPrincipal = getPrincipal();
        if(indexPrincipal>=0)
        {
            String texto = proyectoActual.listaArchivos.get(indexPrincipal).pane.getText();
            this.compilar(texto, "joja2");
        }
        if(MetodosTS.errorazo==false)
        {
            Object[] objs = getNewTab(MetodosTS.texto3d);
            JScrollPane sp = (JScrollPane)objs[0];
            jTabbedPaneEditor.addTab("c3d",null, sp,"Something");
        }
        
        
        
    }
    
    
    public void compiTest2(){
    
        MetodosTS.cargarTiposPrimitivos();
        String texto = this.jTextPaneStart.getText();
        this.compilar(texto, "joja");
        //MetodosTS.putPrincipalAsTipo();
        this.compilar(texto, "joja2");
        
    }
    
    public void compiTest(){
        int indexPrincipal = getPrincipal();
        if(indexPrincipal>=0)
        {
            MetodosTS.cargarTiposPrimitivos();
            String texto = proyectoActual.listaArchivos.get(indexPrincipal).pane.getText();
            this.compilar(texto, "joja");
            this.compilar(texto, "joja2");
        }
    }
    
    public void createTablaSimbolos(){
        int indexPrincipal = getPrincipal();
        if(indexPrincipal>=0)
        {
            String texto = proyectoActual.listaArchivos.get(indexPrincipal).pane.getText();
            this.compilar(texto, "joja");
            
            try 
            {
            Metodos.creaHTMLTS();
            } catch(FileNotFoundException e){System.out.println("jMenuItemCompilarTSActionPerformed " + e.toString());}
        }
        
    }
    
    public int getPrincipal(){
        if(proyectoActual!=null)
        {
            for(int i = 0; i<proyectoActual.listaArchivos.size(); i++)
            {
                if(proyectoActual.listaArchivos.get(i).getPrincipal()==true)
                {
                    return i;
                }
            }
        }
        return -1;
    }
    
    public void test() throws BadLocationException{
        
        compilarColores(this.jTextPaneStart);
        /**
        JScrollPane sp = getNewTab("hola");
        jTabbedPaneEditor.addTab("Titulo",null, sp,"Something");
         **/
        
    }
    
    public void loadTabs(Proyecto pro) throws IOException{
        String ruta = pro.ruta;
        for(int i =0; i<pro.listaArchivos.size(); i++)
        {
            String rutaFinal = ruta + pro.listaArchivos.get(i).getNombre();
            String textoArchivo = readArchivo(rutaFinal);
            Object[] objs = getNewTab(textoArchivo);
            JScrollPane sp = (JScrollPane)objs[0];
            jTabbedPaneEditor.addTab(pro.listaArchivos.get(i).getNombre(),null, sp,"Something");
            pro.listaArchivos.get(i).pane = (JTextPane)objs[1];
            //pro.listaArchivos.get(i).getNombre()
        }
        proyectoActual = pro;
    }
    
    public String readArchivo(String inRuta) throws FileNotFoundException, IOException {
        
        String resultado = null;
        BufferedReader br = new BufferedReader(new FileReader(inRuta));
        try 
        {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            resultado = sb.toString();
        }
        finally 
        {
            br.close();
        }
        return resultado;
    }
    
    public void guardarArchivo(String inRuta, String inTexto) throws FileNotFoundException{
                FileOutputStream fop = null;
		File file;
		String content = inTexto;
 
		try {
 
			file = new File(inRuta);
			fop = new FileOutputStream(file);
 
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
 
			// get the content in bytes
			byte[] contentInBytes = content.getBytes();
 
			fop.write(contentInBytes);
			fop.flush();
			fop.close();
 
			System.out.println("Done");
 
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (fop != null) {
					fop.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
    }
    
    public void saveArchivos() throws FileNotFoundException{
        if(proyectoActual!=null)
        {
            for(int i = 0; i<proyectoActual.listaArchivos.size(); i++)
            {
                String rutaFinal = proyectoActual.ruta + proyectoActual.listaArchivos.get(i).getNombre();
                String texto = proyectoActual.listaArchivos.get(i).pane.getText();
                try (PrintWriter out = new PrintWriter(rutaFinal)) {
                    out.println(texto);
                }
            }
        }
    }
    
    private Object[] getNewTab(String inText){
        Object[] resultado = new Object[2];
        JScrollPane sp = new JScrollPane();
        sp.setVisible(true);
        JTextPane tp = new JTextPane();
        tp.addKeyListener(new KeyAdapter() { 
            @Override
            public void keyReleased(KeyEvent ke) {
                super.keyReleased(ke); //To change body of generated methods, choose Tools | Templates.
             if(ke.getKeyCode()==KeyEvent.VK_SPACE){
                    try {
                        GUInicial.this.compilarColores(tp);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(GUInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }
             }   
            }

        });
        tp.setText(inText);
        tp.setVisible(true);
        
        sp.setViewportView(tp);
        resultado[0] = sp;
        resultado[1] = tp;
        
        return resultado;
    }
    
    public void restModeloRaiz(){
        raizNode = new DefaultMutableTreeNode("Proyectos");
        raizModel = new DefaultTreeModel(raizNode);
        jTreeProyectos.setModel(raizModel);
    }
    
    public void loadTree(Proyecto pro){
        
        restModeloRaiz();
        DefaultMutableTreeNode proyecto = new DefaultMutableTreeNode(pro.nombre);
        raizModel.insertNodeInto(proyecto, raizNode, 0);
        for(int i =pro.listaArchivos.size() - 1; i>=0 ;i--)
        {
            Archivo a = pro.listaArchivos.get(i);
            DefaultMutableTreeNode arch = new DefaultMutableTreeNode(a.getNombre());
            raizModel.insertNodeInto(arch, proyecto, 0);
        }
    }
    
    public String openProyecto(){
        String archivoProyectos;
        int returnVal = jFileChooserProyectos.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            File file = jFileChooserProyectos.getSelectedFile();
            try 
            {
              // What to do with the file, e.g. display it in a TextArea
                
                FileReader fr = new FileReader(file.getAbsolutePath());
                BufferedReader br = new BufferedReader(fr);

                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) 
                {
                    sb.append(line);
                    sb.append("\n");
                    line = br.readLine();
                }
                archivoProyectos = sb.toString();
                br.close();
                return archivoProyectos;
            } 
            catch (FileNotFoundException ex) 
            {
                System.out.println("Problema accediendo al archivo: "+file.getAbsolutePath());
                return null;
            }   
            catch (IOException ex) 
            {
                Logger.getLogger(GUInicial.class.getName()).log(Level.SEVERE, null, ex);
                return null;
            }
        } 
        else 
        {
            System.out.println("Acceso al archivo fue cancelado por el usuario.");
            return "#Cancelado";
        }
    }
    
    public void compilar(String inArchivo, String tipoArchivo){
        
        switch(tipoArchivo)
        {
            case "joja":
                try
                {
                JojaphvizLex jojaLexer = new JojaphvizLex(new StringReader(inArchivo));
                JojaphvizCup jojaParser = new JojaphvizCup(jojaLexer);
                jojaParser.parse();
                }catch (Exception ex){System.out.println(ex.toString());}
                break;
                
            case "joja2":
                try
                {
                JojaphvizLex jojaLexer = new JojaphvizLex(new StringReader(inArchivo));
                JojaphvizCup2 jojaParser2 = new JojaphvizCup2(jojaLexer);
                jojaParser2.parse();
                }catch (Exception ex){System.out.println(ex.toString());}
                break;
                
            case "proy":
                try
                {
                ProyectosLex proyLexer = new ProyectosLex(new StringReader(inArchivo));
                ProyectosCup proyParser = new ProyectosCup(proyLexer);
                proyParser.parse();
                }catch (Exception ex){System.out.println(ex.toString());}
                break;
                
            case "ide":
                try
                {
                MetodosProyectos.listaColores = new ArrayList<>();
                IDEColores proyLexer = new IDEColores(new StringReader(inArchivo));
                proyLexer.yylex();
                }catch (IOException | BadLocationException ex){System.out.println(ex.toString());}
                break;
                
            case "c3d":
                try
                {
                C3dLex c3dLexer = new C3dLex(new StringReader(inArchivo));
                C3dCup c3dParser = new C3dCup(c3dLexer);
                c3dParser.parse();
                }catch (Exception ex){System.out.println(ex.toString());}
                break;
                
        }
        
    }
    
    public void colorearTabs() throws BadLocationException{
        for(int i = 0; i<proyectoActual.listaArchivos.size() ; i++)
        {
            compilarColores(proyectoActual.listaArchivos.get(i).pane);
        }
    
    }
    
    public void compilarColores(JTextPane textPane) throws BadLocationException{
    
        int x = textPane.getCaretPosition();
        String str = textPane.getText();
        this.compilar(str, "ide");
        cambiarColores(textPane);
        textPane.setCaretPosition(x);
        
    }
    
    public void cambiarColores(JTextPane textPane) throws BadLocationException{
        
        DefaultStyledDocument documento = new DefaultStyledDocument();
        
        StyleContext context = new StyleContext();
        // 
        Style estiloPalabraReservada;
        Style estiloOperador;
        Style estiloId;
        Style estiloValor;
        Style estiloNormal;
        Style estiloError;

        estiloPalabraReservada = context.addStyle("palabraReservada", null);
        estiloOperador = context.addStyle("operador", null);
        estiloId = context.addStyle("id", null);
        estiloValor = context.addStyle("valor", null);
        estiloNormal = context.addStyle("valor", null);
        estiloError = context.addStyle("valor", null);

        StyleConstants.setForeground(estiloPalabraReservada, new Color(38,69,223));
        StyleConstants.setForeground(estiloOperador, Color.BLACK);
        StyleConstants.setForeground(estiloId, new Color(139,137,137));
        StyleConstants.setForeground(estiloValor, new Color(223,133,38));
        StyleConstants.setForeground(estiloNormal, Color.BLACK);
        StyleConstants.setForeground(estiloError, Color.RED);
        
        if(MetodosProyectos.listaColores!=null)
        {
            for(int i =0; i<MetodosProyectos.listaColores.size(); i++)
            {
                NodoColores nc = MetodosProyectos.listaColores.get(i);
                switch(nc.estilo)
                {
                    case 0: 
                        documento.insertString(documento.getLength(), nc.str, estiloPalabraReservada);
                        break;
                    case 1: 
                        documento.insertString(documento.getLength(), nc.str, estiloOperador);
                        break;
                    case 2: 
                        documento.insertString(documento.getLength(), nc.str, estiloId);
                        break;
                    case 3: 
                        documento.insertString(documento.getLength(), nc.str, estiloValor);
                        break;
                    case 4: 
                        documento.insertString(documento.getLength(), nc.str, estiloNormal);
                        break;
                    case 5: 
                        documento.insertString(documento.getLength(), nc.str, estiloError);
                        break;
                }
            }
            textPane.setStyledDocument(documento);
        }
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUInicial().setVisible(true);
            }
        });
    }
    
    class MiFiltro extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".pry");
        }
        @Override
        public String getDescription() {
            return "Documentos de proyectos (*.pry)";
        }
    }

    private void expandAll(JTree tree, TreePath path, boolean expand) {
        TreeNode node = (TreeNode) path.getLastPathComponent();
 
        if (node.getChildCount() >= 0) {
            Enumeration enumeration = node.children();
            while (enumeration.hasMoreElements()) {
                TreeNode n = (TreeNode) enumeration.nextElement();
                TreePath p = path.pathByAddingChild(n);
 
                expandAll(tree, p, expand);
            }
        }
 
        if (expand) {
            tree.expandPath(path);
        } else {
            tree.collapsePath(path);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPaneConsola;
    private javax.swing.JFileChooser jFileChooserProyectos;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenu jMenuArchivoAbrir;
    private javax.swing.JMenuItem jMenuArchivoGuardar;
    private javax.swing.JMenu jMenuArchivoNuevo;
    private javax.swing.JMenuBar jMenuBarPrincipal;
    private javax.swing.JMenu jMenuCompilar;
    private javax.swing.JMenu jMenuErrores;
    private javax.swing.JMenuItem jMenuItemAbrirArchivo;
    private javax.swing.JMenuItem jMenuItemAbrirProyecto;
    private javax.swing.JMenuItem jMenuItemArchivoSalir;
    private javax.swing.JMenuItem jMenuItemCompilarClear;
    private javax.swing.JMenuItem jMenuItemCompilarColor;
    private javax.swing.JMenuItem jMenuItemCompilarEjecutar;
    private javax.swing.JMenuItem jMenuItemCompilarGenCod;
    private javax.swing.JMenuItem jMenuItemCompilarOptimizar;
    private javax.swing.JMenuItem jMenuItemCompilarTS;
    private javax.swing.JMenuItem jMenuItemErroresGenerar;
    private javax.swing.JMenuItem jMenuItemNuevoArchivo;
    private javax.swing.JMenuItem jMenuItemNuevoProyecto;
    private javax.swing.JMenuItem jMenuItemTestGo;
    private javax.swing.JMenuItem jMenuItemTestGo2;
    private javax.swing.JMenu jMenuTest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneTree;
    private javax.swing.JTabbedPane jTabbedPaneEditor;
    private javax.swing.JTextPane jTextPaneStart;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
