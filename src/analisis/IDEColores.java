/* The following code was generated by JFlex 1.4.3 on 11/06/14 03:51 PM */

package analisis;
import acciones.proyectos.*;
import java.awt.Color;
import java.util.*;
import java_cup.runtime.Symbol;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/06/14 03:51 PM from the specification file
 * <tt>IDEColores.jflex</tt>
 */
public class IDEColores {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\1\1\0\1\66\1\2\22\0\1\66\1\52\1\10"+
    "\1\40\2\0\1\63\1\11\1\53\1\54\1\4\1\44\1\62\1\45"+
    "\1\6\1\3\12\5\1\61\1\0\1\47\1\51\1\50\1\64\1\0"+
    "\1\21\1\25\1\26\1\32\1\31\1\16\1\24\1\27\1\13\1\7"+
    "\1\34\1\17\1\41\1\14\1\20\1\35\1\7\1\23\1\22\1\15"+
    "\1\33\1\36\1\30\1\37\1\42\1\43\1\55\1\0\1\56\1\46"+
    "\1\12\1\0\1\21\1\25\1\26\1\32\1\31\1\16\1\24\1\27"+
    "\1\13\1\7\1\34\1\17\1\41\1\14\1\20\1\35\1\7\1\23"+
    "\1\22\1\15\1\33\1\36\1\30\1\37\1\42\1\43\1\57\1\65"+
    "\1\60\63\0\1\7\21\0\1\7\u1f54\0\1\7\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\1\20\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\1\2\0\1\16"+
    "\2\0\1\6\1\0\1\10\1\32\27\10\1\33\5\10"+
    "\1\0\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\44\2\0\1\6\1\45\1\10\1\46\4\10"+
    "\1\47\30\10\2\0\1\44\1\10\1\50\1\51\7\10"+
    "\1\52\4\10\1\53\3\10\1\54\1\55\1\10\1\56"+
    "\5\10\1\57\1\0\1\10\1\60\1\61\1\62\1\63"+
    "\1\10\1\64\1\65\4\10\1\66\1\67\1\10\1\70"+
    "\5\10\1\0\1\10\1\71\1\72\1\73\1\74\6\10"+
    "\1\75\1\0\3\10\1\76\1\77\1\10\1\100\1\101"+
    "\1\102\1\10\1\103\1\104\1\10\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\245\0\334\0\u0113\0\67"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\u06e0\0\67\0\u0717\0\u074e\0\u0785"+
    "\0\67\0\u07bc\0\u0181\0\67\0\u07f3\0\u082a\0\u014a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u014a\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u07bc\0\u014a\0\u0f41\0\u014a\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u014a\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u0ed3\0\u15ea\0\u014a\0\u014a"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u014a"+
    "\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u014a\0\u187e\0\u18b5\0\u18ec"+
    "\0\u014a\0\u014a\0\u1923\0\u014a\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\u014a\0\u1a6d\0\u1aa4\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u1adb\0\u014a\0\u014a\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u014a"+
    "\0\u014a\0\u1bee\0\u014a\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u014a\0\u014a\0\u014a\0\u014a\0\u1da6\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u014a\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u014a\0\u014a\0\u1fcc\0\u014a\0\67\0\u014a\0\u2003"+
    "\0\u014a\0\u014a\0\u203a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\11\1\25\1\26\1\11"+
    "\1\27\1\30\1\31\2\11\1\32\1\33\1\11\1\34"+
    "\3\11\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\4\71\0\1\4\63\0\1\4"+
    "\3\0\1\57\1\60\44\0\1\61\66\0\1\61\22\0"+
    "\1\7\1\62\65\0\1\11\1\0\1\11\2\0\26\11"+
    "\1\0\3\11\23\0\1\63\1\0\6\63\1\64\56\63"+
    "\7\0\1\65\3\0\25\65\1\0\3\65\30\0\1\11"+
    "\1\0\1\11\2\0\2\11\1\66\1\11\1\67\21\11"+
    "\1\0\1\70\2\11\30\0\1\11\1\0\1\11\2\0"+
    "\17\11\1\71\6\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\11\11\1\72\3\11\1\73\1\11\1\74"+
    "\6\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\5\11\1\75\1\76\1\77\16\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\100\24\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\24\11\1\101"+
    "\1\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\11\11\1\102\14\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\103\12\11\1\104\7\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\17\11\1\105"+
    "\6\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\6\11\1\106\2\11\1\107\14\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\110\1\111\1\112"+
    "\5\11\1\113\10\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\15\11\1\114\10\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\115\17\11\1\116"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\6\11"+
    "\1\117\10\11\1\120\6\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\6\11\1\121\2\11\1\122\7\11"+
    "\1\123\4\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\6\11\1\124\17\11\1\0\3\11\36\0\1\125"+
    "\117\0\1\126\4\0\1\61\62\0\1\127\3\0\1\61"+
    "\66\0\1\130\66\0\1\131\66\0\1\132\66\0\1\133"+
    "\100\0\1\134\70\0\1\135\1\0\1\57\1\136\1\137"+
    "\64\57\4\140\1\141\62\140\5\0\1\142\72\0\1\64"+
    "\62\0\1\11\1\0\1\11\2\0\3\11\1\143\22\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\23\11"+
    "\1\144\2\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\16\11\1\145\7\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\21\11\1\146\4\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\1\11\1\147\24\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\25\11"+
    "\1\150\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\6\11\1\151\17\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\11\11\1\152\14\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\153\20\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\2\11\1\154"+
    "\14\11\1\155\6\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\7\11\1\156\16\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\11\11\1\157\2\11\1\160"+
    "\11\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\11\11\1\161\14\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\162\24\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\163\10\11\1\164"+
    "\11\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\6\11\1\165\17\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\17\11\1\166\6\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\7\11\1\167\16\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\2\11\1\170"+
    "\23\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\10\11\1\171\15\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\7\11\1\172\16\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\173\24\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\10\11\1\174"+
    "\15\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\175\22\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\4\11\1\176\21\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\177\20\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\1\11\1\200"+
    "\24\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\13\11\1\201\12\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\202\24\11\1\0\3\11\64\0"+
    "\1\203\26\0\1\136\65\0\4\140\1\204\65\140\1\205"+
    "\1\204\62\140\5\0\1\11\1\0\1\11\2\0\11\11"+
    "\1\206\14\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\17\11\1\207\6\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\10\11\1\210\15\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\3\11\1\211\22\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\7\11"+
    "\1\212\16\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\10\11\1\213\15\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\17\11\1\214\6\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\2\11\1\215\23\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\5\11"+
    "\1\216\20\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\7\11\1\217\16\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\6\11\1\220\17\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\1\11\1\221\24\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\222\22\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\21\11\1\223\4\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\224\22\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\5\11\1\225\20\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\7\11"+
    "\1\226\16\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\10\11\1\227\15\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\3\11\1\230\22\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\17\11\1\231\6\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\11\11"+
    "\1\232\14\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\5\11\1\233\20\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\17\11\1\234\6\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\17\11\1\235\6\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\7\11"+
    "\1\236\16\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\237\24\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\24\11\1\240\1\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\5\11\1\241\20\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\20\11"+
    "\1\242\5\11\1\0\3\11\60\0\1\243\31\0\3\140"+
    "\1\136\1\204\62\140\5\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\244\24\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\245\17\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\246\22\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\17\11\1\247"+
    "\6\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\7\11\1\250\16\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\26\11\1\0\2\11\1\251\30\0\1\11"+
    "\1\0\1\11\2\0\6\11\1\252\17\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\26\11\1\0\1\11"+
    "\1\253\1\11\30\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\254\23\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\14\11\1\255\11\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\11\11\1\256\14\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\7\11\1\257\16\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\22\11"+
    "\1\260\3\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\10\11\1\261\15\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\262\24\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\17\11\1\263\6\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\264\23\11\1\0\3\11\30\0\1\11\1\0\1\11"+
    "\2\0\21\11\1\265\4\11\1\0\3\11\30\0\1\11"+
    "\1\0\1\11\2\0\12\11\1\266\13\11\1\0\3\11"+
    "\30\0\1\11\1\0\1\11\2\0\7\11\1\267\16\11"+
    "\1\0\3\11\30\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\270\24\11\1\0\3\11\43\0\1\271\53\0\1\11"+
    "\1\0\1\11\2\0\26\11\1\0\1\272\2\11\30\0"+
    "\1\11\1\0\1\11\2\0\6\11\1\273\17\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\12\11\1\274"+
    "\13\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\15\11\1\275\10\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\276\23\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\2\11\1\277\23\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\2\11\1\300"+
    "\23\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\20\11\1\301\5\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\5\11\1\302\20\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\6\11\1\303\17\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\3\11\1\304"+
    "\22\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\14\11\1\305\11\11\1\0\3\11\46\0\1\306\50\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\307\24\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\12\11\1\310"+
    "\13\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\21\11\1\311\4\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\10\11\1\312\15\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\313\22\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\2\11\1\314"+
    "\23\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\17\11\1\315\6\11\1\0\3\11\40\0\1\316\56\0"+
    "\1\11\1\0\1\11\2\0\11\11\1\317\14\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\21\11\1\320"+
    "\4\11\1\0\3\11\30\0\1\11\1\0\1\11\2\0"+
    "\17\11\1\321\6\11\1\0\3\11\30\0\1\11\1\0"+
    "\1\11\2\0\6\11\1\322\17\11\1\0\3\11\30\0"+
    "\1\11\1\0\1\11\2\0\5\11\1\323\20\11\1\0"+
    "\3\11\30\0\1\11\1\0\1\11\2\0\6\11\1\324"+
    "\17\11\1\0\3\11\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8305];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\26\1\1\11\4\1\10\11"+
    "\1\1\1\11\1\1\2\0\1\11\2\0\1\11\1\0"+
    "\37\1\1\0\11\11\1\1\2\0\41\1\2\0\36\1"+
    "\1\0\25\1\1\0\14\1\1\0\7\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IDEColores(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IDEColores(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException,     BadLocationException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { //linea
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 70: break;
        case 42: 
          { //arco
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 71: break;
        case 62: 
          { //extends
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 72: break;
        case 41: 
          { //this
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 73: break;
        case 7: 
          { //.
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 74: break;
        case 6: 
          { MetodosProyectos.addPalabraColoreada( yytext(), 3);
          }
        case 75: break;
        case 55: 
          { //class
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 76: break;
        case 33: 
          { //!=
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 77: break;
        case 65: 
          { //#import
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 78: break;
        case 66: 
          { //imprimir
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 79: break;
        case 52: 
          { //ovalo
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 80: break;
        case 38: 
          { //new
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 81: break;
        case 10: 
          { //-
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 82: break;
        case 11: 
          { //^
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 83: break;
        case 44: 
          { //case
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 84: break;
        case 46: 
          { //else
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 85: break;
        case 69: 
          { //rectangulo
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 86: break;
        case 8: 
          { MetodosProyectos.addPalabraColoreada( yytext(), 2);
          }
        case 87: break;
        case 48: 
          { //texto
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 88: break;
        case 2: 
          { yychar = 0;
                    MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 89: break;
        case 68: 
          { //poligono
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 90: break;
        case 3: 
          { MetodosProyectos.addPalabraColoreada( yytext(), 4);
                        /* Se ignoran */
          }
        case 91: break;
        case 23: 
          { //,
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 92: break;
        case 60: 
          { //return
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 93: break;
        case 56: 
          { //while
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 94: break;
        case 50: 
          { //false
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 95: break;
        case 19: 
          { //]
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 96: break;
        case 26: 
          { //if
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 97: break;
        case 21: 
          { //}
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 98: break;
        case 57: 
          { //lienzo
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 99: break;
        case 5: 
          { //*
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 100: break;
        case 49: 
          { //float
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 101: break;
        case 12: 
          { //<
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 102: break;
        case 40: 
          { //true
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 103: break;
        case 58: 
          { //string
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 104: break;
        case 22: 
          { //:
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 105: break;
        case 18: 
          { //[
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 106: break;
        case 28: 
          { //++
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 107: break;
        case 64: 
          { //private
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 108: break;
        case 27: 
          { //do
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 109: break;
        case 17: 
          { //)
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 110: break;
        case 9: 
          { //+
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 111: break;
        case 20: 
          { //{
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 112: break;
        case 43: 
          { //bool
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 113: break;
        case 34: 
          { //&&
        MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 114: break;
        case 53: 
          { //array
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 115: break;
        case 16: 
          { //(
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 116: break;
        case 45: 
          { //char
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 117: break;
        case 63: 
          { //default
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 118: break;
        case 59: 
          { //switch
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 119: break;
        case 47: 
          { //void
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 120: break;
        case 37: 
          { //int
                MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 121: break;
        case 54: 
          { //break
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 122: break;
        case 39: 
          { //for
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 123: break;
        case 36: 
          { /* Se ignoran */
          }
        case 124: break;
        case 35: 
          { //||
        MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 125: break;
        case 31: 
          { //>=
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 126: break;
        case 32: 
          { //==
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 127: break;
        case 13: 
          { //>
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 128: break;
        case 1: 
          { /** rojo **/
                                /** Metodos.agregarErrorLexico( "Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar); **/
                                /**Metodos.addError("lexico", yyline, yychar, "Caracter no reconocido: " + yytext());**/
                                System.out.println("Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar); 
                                MetodosProyectos.addPalabraColoreada( yytext(), 5);
          }
        case 129: break;
        case 67: 
          { //continue
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 130: break;
        case 14: 
          { MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 131: break;
        case 30: 
          { //<=
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 132: break;
        case 25: 
          { //?
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 133: break;
        case 4: 
          { // /
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 134: break;
        case 61: 
          { //public
                 MetodosProyectos.addPalabraColoreada( yytext(), 0);
          }
        case 135: break;
        case 15: 
          { //!
        MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 136: break;
        case 29: 
          { //--
                 MetodosProyectos.addPalabraColoreada( yytext(), 1);
          }
        case 137: break;
        case 24: 
          { //&
        MetodosProyectos.addPalabraColoreada( yytext(), 4);
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java IDEColores <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        IDEColores scanner = null;
        try {
          scanner = new IDEColores( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
